server:
  type: simple
  applicationContextPath: /scigraph
  adminContextPath: /admin
  connector:
    type: http
    port: 9000

applicationContextPath: scigraph

graphConfiguration:
  location: ../SciGraph-core/target/mckbGraph
  neo4jConfig:
      use_memory_mapped_buffers : true
      dump_configuration : true
      neostore.nodestore.db.mapped_memory : 1G
      neostore.relationshipstore.db.mapped_memory : 4G
      neostore.propertystore.db.mapped_memory : 500M
      neostore.propertystore.db.strings.mapped_memory : 500M
      neostore.propertystore.db.arrays.mapped_memory : 500M
  indexedNodeProperties:
      - label
      - synonym
      - fragment
  curies:
    # base
    '': 'http://www.monarchinitiative.org/'
    'MONARCH': 'http://www.monarchinitiative.org/MONARCH_'


    # ontologies
    'HP': 'http://purl.obolibrary.org/obo/HP_'
    'ECO': 'http://purl.obolibrary.org/obo/ECO_'
    'RO': 'http://purl.obolibrary.org/obo/RO_'
    'GENO': 'http://purl.obolibrary.org/obo/GENO_'
    'OBO': 'http://purl.obolibrary.org/obo/'
    'OIO': 'http://www.geneontology.org/formats/oboInOwl#'
    'IAO': 'http://purl.obolibrary.org/obo/IAO_'
    'OMIM' : 'http://purl.obolibrary.org/obo/OMIM_'
    'DECIPHER' : 'http://purl.obolibrary.org/obo/DECIPHER_'
    'Orphanet' : 'http://www.orpha.net/ORDO/Orphanet_'
    'faldo' : 'http://biohackathon.org/resource/faldo#'
    'SO' : 'http://purl.obolibrary.org/obo/SO_'
    'OMIM' : 'http://purl.obolibrary.org/obo/OMIM_'
    'DATA' : 'http://purl.obolibrary.org/DATA_'
    'MP': 'http://purl.obolibrary.org/obo/MP_'
    'MA': 'http://purl.obolibrary.org/obo/MA_'
    'ZP': 'http://purl.obolibrary.org/obo/ZP_'
    'ZFA': 'http://purl.obolibrary.org/obo/ZFA_'
    'ZFS': 'http://purl.obolibrary.org/obo/ZFS_'
    'BFO': 'http://purl.obolibrary.org/obo/BFO_'
    'DOID': 'http://purl.obolibrary.org/obo/DOID_'
    'MESH': 'http://purl.obolibrary.org/obo/MESH_'
    'RO': 'http://purl.obolibrary.org/obo/RO_'
    'PATO': 'http://purl.obolibrary.org/obo/PATO_'
    'PR': 'http://purl.obolibrary.org/obo/pr_' #FIXME: believe this is correct, but need confirmation.
    'UMLS' : 'http://purl.obolibrary.org/obo/UMLS_'
    'PW' : 'http://purl.obolibrary.org/obo/PW_'
    'CL' : 'http://purl.obolibrary.org/obo/CL_'
    'CLO' : 'http://purl.obolibrary.org/obo/CLO_'
    'GO' : 'http://purl.obolibrary.org/obo/GO_'
    'SIO' : 'http://semanticscience.org/resource/SIO_'
    'EFO' : 'http://www.ebi.ac.uk/efo/EFO_'
    'UBERON' : 'http://purl.obolibrary.org/obo/UBERON_'
    'SNOMED' : 'http://purl.obolibrary.org/obo/SNOMED_'
    'ERO' : 'http://purl.obolibrary.org/obo/ERO_'
    'NCBITaxon' : 'http://purl.obolibrary.org/obo/NCBITaxon_'
    'CHEBI' : 'http://purl.obolibrary.org/obo/CHEBI_'


    # publication/reference sources
    'PMID': 'http://www.ncbi.nlm.nih.gov/pubmed/'
    'PMCID' : 'http://www.ncbi.nlm.nih.gov/pmc/'
    'ISBN-10': 'http://www.monarchinitiative.org/ISBN10_'
    'ISBN-13': 'http://www.monarchinitiative.org/ISBN13_'
    'ISBN-15': 'http://www.monarchinitiative.org/ISBN15_'
    'ISBN': 'http://www.monarchinitiative.org/ISBN_'
    'DOI' : 'http://dx.doi.org/'
    'J' : 'http://www.informatics.jax.org/reference/J:'

    # other
    'Annotation': 'http://www.w3.org/ns/oa#Annotation'
    'HPO' : 'http://human-phenotype-ontology.org/'  #to be used for persons, though they don't resolve with this
    'PANTHER' : 'http://www.pantherdb.org/panther/family.do?clsAccession='   #protein/orthologous families
    'dbSNP' : 'http://www.ncbi.nlm.nih.gov/projects/SNP/snp_ref.cgi?rs='
    'dbSNPIndividual' : 'http://www.ncbi.nlm.nih.gov/SNP/snp_ind.cgi?ind_id='  #FIXME
    'DrugBank' : 'http://www.drugbank.ca/drugs/'
    'GeneReviews' : 'http://www.ncbi.nlm.nih.gov/books/'
    'KEGG' : 'http://www.kegg.jp/dbget-bin/www_bget?path:map'
    'REACT' : 'http://www.reactome.org/content/detail/REACT_'
    'JAX' : 'http://jaxmice.jax.org/strain/'
    'EOM' : 'http://purl.obolibrary.org/obo/EOM_'
    'Coriell' : 'https://catalog.coriell.org/0/Sections/Search/Sample_Detail.aspx?Ref='
    'CoriellCollection' : 'https://catalog.coriell.org/1/'
    'CoriellFamily' : 'https://catalog.coriell.org/0/Sections/BrowseCatalog/FamilyTypeSubDetail.aspx?fam='
    'CoriellIndividual' : 'https://catalog.coriell.org/Search?q='
    'UCSC' : 'ftp://hgdownload.cse.ucsc.edu/goldenPath/'
    'NCBIGenome' : 'http://www.ncbi.nlm.nih.gov/genome/?term='
    'ClinVar' : 'http://www.ncbi.nlm.nih.gov/clinvar/'
    'ClinVarVariant' : 'http://www.ncbi.nlm.nih.gov/clinvar/variation/'
    'MedGen' : 'http://www.ncbi.nlm.nih.gov/medgen/'
    'dbVAR' : 'http://www.ncbi.nlm.nih.gov/dbvar/'
    'COSMIC' : 'http://cancer.sanger.ac.uk/cosmic/mutation/overview?id='
    'CCDS' : 'http://www.ncbi.nlm.nih.gov/CCDS/CcdsBrowse.cgi?REQUEST=CCDS&DATA='

    # genes
    'NCBIGene' : 'http://www.ncbi.nlm.nih.gov/gene/'
    'HGNC' : 'http://www.genenames.org/cgi-bin/gene_symbol_report?hgnc_id=HGNC:'
    'HPRD' : 'http://www.hprd.org/protein/'
    'ENSEMBL' : 'http://identifiers.org/ENSEMBL:'
    'miRBase' : 'http://www.mirbase.org/cgi-bin/mirna_entry.pl?acc='
    'MGI': 'http://www.informatics.jax.org/accession/MGI:'  #Note this will work for marker(gene), allele, and references, but not genotype
    'BIOGRID' : 'http://thebiogrid.org/'
    'RGD' : 'http://rgd.mcw.edu/rgdweb/report/gene/main.html?id='
    'ZFIN' : 'http://zfin.org/'
    'dictyBase' : 'http://dictybase.org/gene/'
    'TAIR' : 'http://identifiers.org/TAIR:'
    'FlyBase' : 'http://identifiers.org/FB:'
    'PomBase' : 'http://identifiers.org/PomBase:'
    'WormBase' : 'http://identifiers.org/WormBase:'
    'SGD' : 'http://identifiers.org/SGD:'
    'RefSeq' : 'http://www.ncbi.nlm.nih.gov/refseq/?term='
    'IMPC' : 'http://www.mousephenotype.org/data/genes/'  #FIXME
    'GenBank' : 'http://www.ncbi.nlm.nih.gov/nuccore/'
    'CGD' : 'http://ohsu.edu/cgd/'

    # proteins
    'UniProtKB' : 'http://identifiers.org/uniprot/'
    'SwissProt' : 'http://identifiers.org/SwissProt:'
    'TrEMBL' : 'http://www.uniprot.org/uniprot/'
    'PDB' : 'http://identifiers.org/PDB:'
    'NCBIProtein' : 'http://www.ncbi.nlm.nih.gov/protein/'
    'EC' : 'http://identifiers.org/EC:'  #FIXME: Enzyme Commission numbers. Any preferred url that can resolve this?

    #chemicals
    'CID' : 'http://pubchem.ncbi.nlm.nih.gov/compound/'

cypherResources:
    ##################
    ### PHENOTYPES
    ##################
    
    ## Genes from phenotype
    - path: /dynamic/phenotypes/{phenotype_id}/genes
      query: |
              START phenotype = node:node_auto_index(fragment={phenotype_id})
              MATCH (g:gene)-[equiv:equivalentClass*0..2]-(ge)-[r:RO_0002200*]->(phenotype)
              RETURN distinct g, equiv, ge, r, phenotype
      operations:
        - summary: Get genes related to a phenotype
          parameters:
            - name: phenotype_id
              description: The ID of the phenotype # try HP_0000528
    - path: /dynamic/phenotypes/{phenotype_id}/genes/targets
      query: |
              START phenotype = node:node_auto_index(fragment={phenotype_id})
              MATCH (g:gene)-[equiv:equivalentClass*0..2]-(ge)-[r:RO_0002200*]->(phenotype)
              RETURN distinct g
      operations:
        - summary: Get genes related to a phenotype
          parameters:
            - name: phenotype_id
              description: The ID of the phenotype # try HP_0000528
    
    ## Diseases from phenotype
    - path: /dynamic/phenotypes/{phenotype_id}/diseases
      query: |
              START phenotype = node:node_auto_index(fragment={phenotype_id})
              MATCH (disease:disease)<-[s1:subClassOf*0..]-(d)-[r:RO_0002200]->(p)-[s2:subClassOf*0..]->(phenotype:Phenotype)
              RETURN distinct disease, s1, d, r, p, s2, phenotype
      operations:
        - summary: Get diseases for a phenotype
          parameters:
            - name: phenotype_id
              description: The ID of the phenotype # HP_0000963
    - path: /dynamic/phenotypes/{phenotype_id}/diseases/targets
      query: |
              START phenotype = node:node_auto_index(fragment={phenotype_id})
              MATCH (disease:disease)<-[s1:subClassOf*0..]-(d)-[r:RO_0002200]->(p)-[s2:subClassOf*0..]->(phenotype:Phenotype)
              RETURN distinct disease
      operations:
        - summary: Get diseases for a phenotype
          parameters:
            - name: phenotype_id
              description: The ID of the phenotype # HP_0000963
    
    ## Features from phenotype
    - path: /dynamic/phenotypes/{phenotype_id}/features
      query: |
              START p=node:node_auto_index(fragment={phenotype_id})
              MATCH (p)-[seqVar:equivalentClass*0..1]-(p2)
              OPTIONAL MATCH (f1)-[hasP1:RO_0002200*]->(p2)
              OPTIONAL MATCH (f2)<-[hasPart:BFO_0000051!*]-(genotype)-[hasP2:RO_0002200*]->(p2)
              OPTIONAL MATCH (f3)<-[hasPart2:BFO_0000051!*]-(genotype2)<-[hasGenotype:GENO_0000222]-(person)-[hasP3:RO_0002200*]->(p2)
              RETURN DISTINCT f1, f2, f3, seqVar, hasP1, hasPart, genotype, hasP2, hasPart2, genotype2, hasGenotype, person, hasP3
      operations:
        - summary: Get features for a phenotype
          parameters:
            - name: phenotype_id
              description: The ID of the phenotype
    - path: /dynamic/phenotypes/{phenotype_id}/features/targets
      query: |
              START p=node:node_auto_index(fragment={phenotype_id})
              MATCH (p)-[seqVar:equivalentClass*0..1]-(p2)
              OPTIONAL MATCH (f1)-[hasP1:RO_0002200*]->(p2)
              OPTIONAL MATCH (f2)<-[hasPart:BFO_0000051!*]-(genotype)-[hasP2:RO_0002200*]->(p2)
              OPTIONAL MATCH (f3)<-[hasPart2:BFO_0000051!*]-(genotype2)<-[hasGenotype:GENO_0000222]-(person)-[hasP3:RO_0002200*]->(p2)
              RETURN DISTINCT f1, f2, f3
      operations:
        - summary: Get features for a phenotype
          parameters:
            - name: phenotype_id
              description: The ID of the phenotype
    
    ##################
    ### GENOTYPES
    ##################
    
    ## Features from genotype
    - path: /dynamic/genotypes/{genotype_id}/features
      query: |
              START genotype=node:node_auto_index(fragment={genotype_id})
              MATCH (f)<-[seqVar:GENO_0000408*0..1]-(feature)<-[hasPart:BFO_0000051!*]-(genotype)
              RETURN DISTINCT f, seqVar, feature, hasPart, genotype
      operations:
        - summary: Get features for a genotype
          parameters:
            - name: genotype_id
              description: The ID of the genotype
    - path: /dynamic/genotypes/{genotype_id}/features/targets
      query: |
              START genotype=node:node_auto_index(fragment={genotype_id})
              MATCH (f)<-[seqVar:GENO_0000408*0..1]-(feature)<-[hasPart:BFO_0000051!*]-(genotype)
              RETURN DISTINCT genotype
      operations:
        - summary: Get features for a genotype
          parameters:
            - name: genotype_id
              description: The ID of the genotype
    
    
    ##################
    ### DISEASES
    ##################
    
    ## Phenotypes from disease
    - path: /dynamic/diseases/{disease_id}/phenotypes
      query: |
              START disease = node:node_auto_index(fragment={disease_id})
              MATCH (disease)<-[s1:subClassOf*0..]-(d)-[r:RO_0002200]->(p)-[s2:subClassOf*1..]->(phenotype:Phenotype)
              RETURN distinct disease, s1, d, r, p, s2, phenotype
      operations:
        - summary: Get phenotype for a disease
          parameters:
            - name: disease_id
              description: The ID of the disease # DOID_2490
    - path: /dynamic/diseases/{disease_id}/phenotypes/targets
      query: |
              START disease = node:node_auto_index(fragment={disease_id})
              MATCH (disease)<-[s1:subClassOf*0..]-(d)-[r:RO_0002200]->(p)-[s2:subClassOf*1..]->(phenotype:Phenotype)
              RETURN distinct phenotype
      operations:
        - summary: Get phenotype for a disease
          parameters:
            - name: disease_id
              description: The ID of the disease # DOID_2490
    
    ##################
    ### GENES
    ##################
    
    ## Genotypes from gene
    - path: /dynamic/genes/{gene_id}/genotypes
      query: |
              START genotypeClass = node:node_auto_index(fragment='GENO_0000000'),
                    gene = node:node_auto_index(fragment={gene_id})
                    MATCH (gene)-[equiv:equivalentClass*0..1]-(ge:gene)<-[geno:GENO_0000408]-(variantLocus)<-[part:BFO_0000051!*]-(genotype)-[:type]->(genotypeClass)
                    RETURN distinct gene, equiv, ge, geno, variantLocus, part, genotype
      operations:
        - summary: Get genotypes for a gene
          parameters:
            - name: gene_id
              description: The ID of the gene # MGI:3583900
              required: true
              type: string
              paramType: path
    - path: /dynamic/genes/{gene_id}/genotypes/targets
      query: |
              START genotypeClass = node:node_auto_index(fragment='GENO_0000000'),
                    gene = node:node_auto_index(fragment={gene_id})
                    MATCH (gene)-[equiv:equivalentClass*0..1]-(ge:gene)<-[geno:GENO_0000408]-(variantLocus)<-[part:BFO_0000051!*]-(genotype)-[:type]->(genotypeClass)
                    RETURN genotype
      operations:
        - summary: Get genotypes for a gene
          parameters:
            - name: gene_id
              description: The ID of the gene # MGI:3583900
    
    ## Homologs from gene
    - path: /dynamic/genes/{gene_id}/homologs
      query: |
              START gene = node:node_auto_index(fragment={gene_id})
              MATCH (gene)-[e:equivalentClass*0..2]-(ge:gene)-[homology:\${homolog_id}!]-(homolog)
              RETURN distinct gene, e, ge, homology, homolog
      operations:
        - summary: Get homologs for a gene
          parameters:
            - name: gene_id
              description: The ID of the gene # NCBIGene:6469
            - name: homolog_id
              description: The homolog relationship # RO_HOM0000017
              paramType: query
    - path: /dynamic/genes/{gene_id}/homologs/targets
      query: |
              START gene = node:node_auto_index(fragment={gene_id})
              MATCH (gene)-[e:equivalentClass*0..2]-(ge:gene)-[homology:\${homolog_id}!]-(homolog)
              RETURN distinct homolog
      operations:
        - summary: Get homologs for a gene
          parameters:
            - name: gene_id
              description: The ID of the gene # NCBIGene:6469
            - name: homolog_id
              description: The homolog relationship # RO_HOM0000017
              paramType: query
    
    ##################
    ### FEATURES
    ##################
    
    ## Phenotypes from feature
    - path: /dynamic/features/{feature_id}/phenotypes
      query: |
              START f=node:node_auto_index(fragment={feature_id})
              MATCH (f)<-[seqVar:GENO_0000408*0..1]-(feature)
              OPTIONAL MATCH (feature)-[hasP1:RO_0002200*]->(phenotype:Phenotype)
              OPTIONAL MATCH (feature)-[e:sameAs]-(genotype)-[hasP2:RO_0002200*]->(phenotype2:Phenotype)
              OPTIONAL MATCH (feature)-[ref:GENO_0000408]-(genotype2)-[hasP3:RO_0002200*]->(phenotype3:Phenotype)
              OPTIONAL MATCH (feature)<-[hasPart:BFO_0000051!*]-(genotype3)-[hasP4:RO_0002200*]->(phenotype4:Phenotype)
              OPTIONAL MATCH (feature)<-[hasPart2:BFO_0000051!*]-(genotype4)<-[hasGenotype:GENO_0000222]-(person)-[hasP5:RO_0002200*]->(phenotype5:Phenotype)
              RETURN DISTINCT f, seqVar, feature, hasP1, phenotype, e, genotype, hasP2, phenotype2, ref, genotype2, hasP3, phenotype3,
                              hasPart, genotype3, hasP4, phenotype4, hasPart2, genotype4, hasGenotype, person, hasP5, phenotype5

      operations:
        - summary: Get phenotypes for a feature
          parameters:
            - name: feature_id
              description: The ID of the feature as a URI or Curie (ex COSMIC:21683)
    - path: /dynamic/features/{feature_id}/phenotypes/targets
      query: |
              START f=node:node_auto_index(fragment={feature_id})
              MATCH (f)<-[seqVar:GENO_0000408*0..1]-(feature)
              OPTIONAL MATCH (feature)-[hasP1:RO_0002200*]->(phenotype:Phenotype)
              OPTIONAL MATCH (feature)<-[hasPart:BFO_0000051!*]-(genotype)-[hasP2:RO_0002200*]->(phenotype2:Phenotype)
              OPTIONAL MATCH (feature)<-[hasPart2:BFO_0000051!*]-(genotype2)<-[hasGenotype:GENO_0000222]-(person)-[hasP3:RO_0002200*]->(phenotype3:Phenotype)
              RETURN DISTINCT phenotype, phenotype2, phenotype3
      operations:
        - summary: Get phenotypes for a feature
          parameters:
            - name: feature_id
              description: The ID of the feature as a URI or Curie (ex COSMIC:21683)

    ## Phenotypes from drug
    - path: /dynamic/chemical/{chemical_id}/phenotypes
      query: |
              START drug=node:node_auto_index(fragment={chemical_id})
              MATCH (drug:drug)<-[rel]-(assoc)-[:hasSubject]->(variant)-[hasP:RO_0002200*]->(phenotype:Phenotype)
              RETURN DISTINCT drug, rel, assoc, variant, phenotype, hasP
      operations:
        - summary: Get phenotypes for a chemical
          parameters:
            - name: chemical_id
              description: The ID of the chemical as a URI or Curie (ex DrugBank:DB00317)

    ## Phenotypes from drug relationship
    - path: /dynamic/relationships/{relationship_id}/phenotypes
      query: |
              MATCH (drug:drug)<-[rel:${relationship_id}!]-(assoc)-[:hasSubject]->(variant)-[hasP:RO_0002200*]->(phenotype:Phenotype)
              RETURN DISTINCT drug, rel, assoc, variant, hasP, phenotype
      operations:
        - summary: Get phenotypes for a relationship
          parameters:
            - name: relationship_id
              description: The ID of the relationship as a URI or Curie (ex RO:sensitivity)

     ## Phenotypes from genomic position
    - path: /dynamic/position/phenotypes
      query: |
              START start_pos=node:node_auto_index(fragment=":_${genome_build}chr${chromosome}-${start}"),
                    end_pos=node:node_auto_index(fragment=":_${genome_build}chr${chromosome}-${end}")
              MATCH (start_pos)<-[:begin]-(region)<-[:location]-(variant)
              MATCH (end_pos)<-[:end]-(region)<-[:location]-(variant)
              RETURN DISTINCT start_pos, end_pos, variant
      operations:
        - summary: Get phenotypes for a relationship
          parameters:
            - name: start
              description: The starting genomic coordinate (ex 55152093)
              paramType: query
            - name: end
              description: The ending genomic coordinate (ex 55152093)
              paramType: query
            - name: chromosome
              description: The alphanumeric chromosomal ID (1-22,X,Y) (ex 15)
              paramType: query
            - name: genome_build
              description: The genome build (ex hg19)
              paramType: query
    
    ## Genotypes from feature
    - path: /dynamic/features/{feature_id}/genotypes
      query: |
              START f=node:node_auto_index(fragment={feature_id})
              MATCH (f)<-[seqVar:GENO_0000408*0..1]-(feature)<-[hasPart:BFO_0000051!*]-(genotype)
              RETURN DISTINCT f, seqVar, feature, hasPart, genotype
      operations:
        - summary: Get genotypes for a feature
          parameters:
            - name: feature_id
              description: The ID of the feature
    - path: /dynamic/features/{feature_id}/genotypes/targets
      query: |
              START f=node:node_auto_index(fragment={feature_id})
              MATCH (f)<-[seqVar:GENO_0000408*0..1]-(feature)<-[hasPart:BFO_0000051!*]-(genotype)
              RETURN DISTINCT genotype
      operations:
        - summary: Get genotypes for a feature
          parameters:
            - name: feature_id
              description: The ID of the feature
    
    ##################
    ### EVIDENCE
    ##################
    
    ## Evidence connecting subject_id to object_id
    - path: /dynamic/evidence/{subject_id}/{object_id}
      query: |
              START subject = node:node_auto_index(fragment={subject_id}),
              object = node:node_auto_index(fragment={object_id}),
              evidenceCode = node:node_auto_index(fragment={evidence_code})
              MATCH (subject)-[equiv1:equivalentClass*0..1]-(se)<-[s1:subClassOf*]-(actualSubject)<-[hs:hasSubject]-(annotation)-[ho:hasObject]->(actualObject)-[s2:subClassOf*]->(object),
              (annotation)-[evi:evidence]->(actualCode)-[s3:subClassOf*]->(evidenceCode)
              OPTIONAL MATCH (annotation)-[srce:source]->(sn)
              RETURN DISTINCT subject, equiv1, se, s1, actualSubject, hs, annotation, ho, actualObject, s2, object, evi, actualCode, s3, evidenceCode, srce, sn
      operations:
        - summary: Get evidence for a pair of ids
          parameters:
            - name: subject_id
              description: The subject of the evidence # DOID_2490
            - name: object_id
              description: The object of the evidence # HP_0002060
            - name: evidence_code
              description: The type of evidence to include # ECO_0000501
              paramType: query

    ##################
    ### G2P
    ##################

        ## Phenotypes from drug
    - path: /dynamic/chemical/{chemical_id}/g2p
      query: |
              START drug=node:node_auto_index(fragment={chemical_id})
              MATCH (drug:drug)<-[rel]-(assoc)-[:hasSubject]->(variant)-[hasP:RO_0002200]->(phenotype:Phenotype)
              OPTIONAL MATCH (gene)-[ref:GENO_0000408]-(variant)-[hasP2:RO_0002200]->(phenotype:Phenotype)
              OPTIONAL MATCH (feature)-[e:sameAs]-(variant)-[hasP3:RO_0002200]->(phenotype:Phenotype)
              RETURN DISTINCT drug, rel, assoc, variant, phenotype, hasP, gene, feature, ref, e, hasP2, hasP3
      operations:
        - summary: Get phenotypes for a chemical
          parameters:
            - name: chemical_id
              description: The ID of the chemical as a URI or Curie (ex DrugBank:DB00317)

    ## Phenotypes from drug relationship
    - path: /dynamic/relationships/{relationship_id}/g2p
      query: |
              MATCH (drug:drug)<-[rel:${relationship_id}!]-(assoc)-[:hasSubject]->(variant)-[hasP:RO_0002200]->(phenotype:Phenotype)
              OPTIONAL MATCH (gene)<-[ref:GENO_0000408]-(variant)-[hasP2:RO_0002200]->(phenotype:Phenotype)
              OPTIONAL MATCH (feature)-[e:sameAs]-(variant)-[hasP3:RO_0002200]->(phenotype:Phenotype)
              RETURN DISTINCT drug, rel, assoc, variant, hasP, phenotype, gene, feature, ref, e, hasP2, hasP3
      operations:
        - summary: Get phenotypes for a relationship
          parameters:
            - name: relationship_id
              description: The ID of the relationship as a URI or Curie (ex RO:sensitivity)

     ## Phenotypes from genomic position
    - path: /dynamic/position/g2p
      query: |
              START start_pos=node:node_auto_index(fragment=":_${genome_build}chr${chromosome}-${start}"),
                    end_pos=node:node_auto_index(fragment=":_${genome_build}chr${chromosome}-${end}")
              MATCH (start_pos)<-[:begin]-(region)<-[:location]-(variant)
              MATCH (end_pos)<-[:end]-(region)<-[:location]-(variant)
              OPTIONAL MATCH (gene)<-[ref:GENO_0000408]-(variant)-[hasP:RO_0002200]->(phenotype:Phenotype)
              OPTIONAL MATCH (feature)-[e:sameAs]-(variant)-[hasP2:RO_0002200]->(phenotype:Phenotype)
              RETURN DISTINCT start_pos, end_pos, variant, gene, feature, ref, e, hasP, hasP2
      operations:
        - summary: Get phenotypes for a relationship
          parameters:
            - name: start
              description: The starting genomic coordinate (ex 55152093)
              paramType: query
            - name: end
              description: The ending genomic coordinate (ex 55152093)
              paramType: query
            - name: chromosome
              description: The alphanumeric chromosomal ID (1-22,X,Y) (ex 15)
              paramType: query
            - name: genome_build
              description: The genome build (ex hg19)
              paramType: query

    ##################
    ### Get All Nodes
    ##################

        ## Phenotypes from drug
    - path: /dynamic/all/{category}
      query: |
              MATCH (node:${category})
              RETURN DISTINCT node
      operations:
        - summary: Get all nodes in category
          parameters:
            - name: category
              description: Get all nodes in category (ex. gene,  disease, chemical, Phenotype, variant)
            - name: prefix
              description: The category of the node
              paramType: prefix
